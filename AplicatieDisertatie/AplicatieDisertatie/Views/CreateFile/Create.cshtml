@model AplicatieDisertatie.Models.CommonViewModel

@{
	ViewBag.Title = "Create";
	Layout = "~/Views/Shared/_Layout.cshtml";
}


<h2>Create</h2>


@using (Html.BeginForm("Create", "CreateFile", FormMethod.Post))
{
				@Html.AntiForgeryToken()

				<div class="form-horizontal">
		<h4>File</h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<div class="form-group">
			@Html.LabelFor(model => model.FileVM.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.FileVM.FileName, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.FileVM.FileName, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<button type="button"
						class="btn btn-primary"
						href="#addNewQuestionPopup"
						data-toggle="modal"
						id="btnPopup">
					Add question
				</button>
			</div>

			<div id="newQuestions">
				@* The region where the controls will be added dynamically *@
			</div>

			@* Modal form for adding new question *@
			<div class="modal" id="addNewQuestionPopup">
				<div class="modal-dialog" role="document">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title">Add new question</h5>
							<button type="button" class="close" data-dismiss="modal" aria-label="Close">
								<span aria-hidden="true">&times;</span>
							</button>
						</div>
						<div class="modal-body">
							<form id="form">
								<fieldset id="submitForm">
									<div class="form-group" style="white-space:nowrap">
										@Html.LabelFor(m => m.QuestionTypeVM.Type, new { @class = "col-md-2 control-label" })
										<div class="col-md-6">
											@Html.DropDownListFor(model => model.QuestionTypeVM.TypeId, (SelectList)ViewBag.QuestionTypes, "    ", new { id = "questionTypeId", @class = "form-control displayedQuestionTypes" })
											@Html.HiddenFor(m => m.QuestionTypeVM.Type, new { @class = "displayedQuestionTypesText form-control" })
										</div>
									</div>

									<div class="form-group" id="questionText">
										@Html.LabelFor(model => model.QuestionVM.QuestionText, htmlAttributes: new { @class = "control-label col-md-2" })
										<div class="col-md-10">
											@Html.EditorFor(model => model.QuestionVM.QuestionText, new { htmlAttributes = new { @class = "form-control", @id="qText" } })
											@Html.ValidationMessageFor(model => model.QuestionVM.QuestionText, "", new { @class = "text-danger" })
										</div>
									</div>

									<div class="form-group" id="answersNo">
										@Html.LabelFor(model => model.QuestionVM.AnswersNo, htmlAttributes: new { @class = "control-label col-md-2" })
										<div class="col-md-10">
											@Html.EditorFor(model => model.QuestionVM.AnswersNo, new { htmlAttributes = new { @class = "form-control", @id="ansNo" } })
											@Html.ValidationMessageFor(model => model.QuestionVM.AnswersNo, "", new { @class = "text-danger" })
										</div>
									</div>
								</fieldset>
							</form>
						</div>
						<div class="modal-footer">
							<button id="btnAddNewQuestion" type="button" class="btn btn-success">Save changes</button>
							<button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Create" id="addFile" class="btn btn-success" />
				@*@Html.ActionLink("Open", "OpenFile", new { id = item.FileId })*@
			</div>
		</div>
	</div>
}


<div>
	@Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/MyScripts/QuestionPopup.js"></script>
<script src="~/Scripts/MyScripts/AddNewQuestionWithAnsOp.js"></script>
<script src="~/Scripts/MyScripts/UpdateQuestionList.js"></script>

<script>
		$(function () {
			$(".displayedQuestionTypes").on("change", function () {
				$(".displayedQuestionTypesText").val($(this).find("option:selected").text());
			});
		});


	//	// hide all div options
	//	function hideOnLoad() {
	//		$('#questionText').hide();
	//		$('#answersNo').hide();
	//	};

	//	// clear the inputs
	//	$.clearFormFields = function (area) {
	//		$(area).find('input[type="text"], input[type="number"],textarea,select').val('');
	//	};

	//	// Render the popup controls
	//	$(document).ready(function () {
	//		hideOnLoad();
	//		$("#questionTypeId").on("change", function () {
	//			var value = $("#questionTypeId option:selected").index();
	//			if (value == 3) {
	//				$("#questionText").show();
	//				$("#answersNo").hide();
	//			}
	//			else if (value == 1 || value == 2) {
	//				$("#questionText").show();
	//				$("#answersNo").show();
	//			}
	//			else {
	//				hideOnLoad();
	//			}
	//		});
	//	});

	//	// Send the values to the server side
	//$("#btnAddNewQuestion").click(function () {
	//	//var itemIndex = $("#newQuestions input.iHidden").length;
	//	var data = $("#submitForm").serialize();// + '&CommonVMId=' + itemIndex;
	//		$.ajax({
	//			type: "POST",
	//			url: "/CreateFile/AddNewQuestion",
	//			data: data,
	//			//data: JSON.stringify(data),
	//			success: function (partialView) {
	//				$("#addNewQuestionPopup").modal("hide");
	//				$('#newQuestions').append(partialView);
	//				$.clearFormFields('#addNewQuestionPopup');
	//				hideOnLoad();
	//			}
	//		})
	//	});
	
		// TODO: Add popup validation
		$('#addNewQuestionPopup').change(
			function () {
				$.validator.unobtrusive.parse("#your-form-id");
		});

</script>
}